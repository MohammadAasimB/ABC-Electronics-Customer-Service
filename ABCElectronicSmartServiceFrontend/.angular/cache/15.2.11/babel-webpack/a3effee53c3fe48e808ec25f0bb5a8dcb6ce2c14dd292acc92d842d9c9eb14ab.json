{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./login.service\";\nexport class ApiService {\n  // loginService: any;\n  constructor(http, loginService) {\n    this.http = http;\n    this.loginService = loginService;\n    this.baseUrl = 'http://localhost:8080/logIn';\n    this.bookComplaintUrl = 'http://localhost:8080/api/complaints';\n  }\n  // logIn(name: string, password: string, role: string): Observable<string> {\n  //   const url = `${this.baseUrl}/${name}/${password}/${role}`;\n  //   return this.http.get<string>(url);\n  // }\n  getClientById(id) {\n    return this.http.get('http://localhost:8080/api/clients/' + id);\n  }\n  logIn(name, password, role) {\n    const url = `${this.baseUrl}/${name}/${password}/${role}`;\n    return this.http.get(url, {\n      responseType: 'text'\n    }).pipe(tap(response => {\n      this.loginService.setSignin(true);\n      this.loginService.setUserId(response);\n    }));\n  }\n  addComplaint(complaint) {\n    return this.http.post('http://localhost:8080/complaints/', complaint);\n  }\n  addData(demo) {\n    return this.http.post('http://localhost:8081/addData', demo);\n  }\n  getComplaintByClient(id) {\n    return this.http.get('http://localhost:8080/complaints/all/' + id);\n  }\n  getComplaintByEngineer(id) {\n    return this.http.get('http://localhost:8080/engineer/' + id + '/open-complaints');\n  }\n  getComplaintById(id) {\n    return this.http.get('http://localhost:8080/complaints/' + id);\n  }\n  getAllProducts() {\n    return this.http.get('http://localhost:8080/api/products/allProducts');\n  }\n  static {\n    this.ɵfac = function ApiService_Factory(t) {\n      return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LoginService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;;AAStC,OAAM,MAAOC,UAAU;EAGrB;EAEAC,YAAoBC,IAAgB,EAAUC,YAA0B;IAApD,SAAI,GAAJD,IAAI;IAAsB,iBAAY,GAAZC,YAAY;IAJlD,YAAO,GAAG,6BAA6B;IACvC,qBAAgB,GAAG,sCAAsC;EAGU;EAE3E;EACA;EACA;EACA;EAEAC,aAAa,CAACC,EAAU;IACtB,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAS,oCAAoC,GAAGD,EAAE,CAAC;EACzE;EAEAE,KAAK,CAACC,IAAY,EAAEC,QAAgB,EAAEC,IAAY;IAChD,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,IAAIJ,IAAI,IAAIC,QAAQ,IAAIC,IAAI,EAAE;IACzD,OAAO,IAAI,CAACR,IAAI,CAACI,GAAG,CAACK,GAAG,EAAE;MAAEE,YAAY,EAAE;IAAM,CAAE,CAAC,CAACC,IAAI,CACtDf,GAAG,CAAEgB,QAAQ,IAAI;MACf,IAAI,CAACZ,YAAY,CAACa,SAAS,CAAC,IAAI,CAAC;MACjC,IAAI,CAACb,YAAY,CAACc,SAAS,CAACF,QAAQ,CAAC;IACvC,CAAC,CAAC,CACH;EACH;EAEAG,YAAY,CAACC,SAAoB;IAC/B,OAAO,IAAI,CAACjB,IAAI,CAACkB,IAAI,CAAC,mCAAmC,EAAED,SAAS,CAAC;EACvE;EACAE,OAAO,CAACC,IAAe;IACrB,OAAO,IAAI,CAACpB,IAAI,CAACkB,IAAI,CAAC,+BAA+B,EAAEE,IAAI,CAAC;EAC9D;EAEAC,oBAAoB,CAAClB,EAAU;IAC7B,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAClB,uCAAuC,GAAGD,EAAE,CAC7C;EACH;EAEAmB,sBAAsB,CAACnB,EAAU;IAC/B,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAClB,iCAAiC,GAAGD,EAAE,GAAG,kBAAkB,CAC5D;EACH;EAEAoB,gBAAgB,CAACpB,EAAU;IACzB,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAY,mCAAmC,GAAGD,EAAE,CAAC;EAC3E;EAEAqB,cAAc;IACZ,OAAO,IAAI,CAACxB,IAAI,CAACI,GAAG,CAClB,gDAAgD,CACjD;EACH;;;uBArDWN,UAAU;IAAA;EAAA;;;aAAVA,UAAU;MAAA2B,SAAV3B,UAAU;MAAA4B,YAFT;IAAM;EAAA","names":["tap","ApiService","constructor","http","loginService","getClientById","id","get","logIn","name","password","role","url","baseUrl","responseType","pipe","response","setSignin","setUserId","addComplaint","complaint","post","addData","demo","getComplaintByClient","getComplaintByEngineer","getComplaintById","getAllProducts","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\MB20\\OneDrive - Capgemini\\Desktop\\New folder\\ABCElectronicSmartServiceFrontend\\src\\app\\service\\Api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, tap } from 'rxjs';\nimport { LoginService } from './login.service';\nimport { Complaint } from '../model/complaint';\nimport { Product } from '../model/product';\nimport { Client } from '../model/client';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiService {\n  private baseUrl = 'http://localhost:8080/logIn';\n  private bookComplaintUrl = 'http://localhost:8080/api/complaints';\n  // loginService: any;\n\n  constructor(private http: HttpClient, private loginService: LoginService) {}\n\n  // logIn(name: string, password: string, role: string): Observable<string> {\n  //   const url = `${this.baseUrl}/${name}/${password}/${role}`;\n  //   return this.http.get<string>(url);\n  // }\n\n  getClientById(id: string): Observable<Client> {\n    return this.http.get<Client>('http://localhost:8080/api/clients/' + id);\n  }\n\n  logIn(name: string, password: string, role: string): Observable<string> {\n    const url = `${this.baseUrl}/${name}/${password}/${role}`;\n    return this.http.get(url, { responseType: 'text' }).pipe(\n      tap((response) => {\n        this.loginService.setSignin(true);\n        this.loginService.setUserId(response);\n      })\n    );\n  }\n\n  addComplaint(complaint: Complaint): Observable<Complaint> {\n    return this.http.post('http://localhost:8080/complaints/', complaint);\n  }\n  addData(demo: DemoModel): Observable<any> {\n    return this.http.post('http://localhost:8081/addData', demo);\n  }\n\n  getComplaintByClient(id: String): Observable<Complaint[]> {\n    return this.http.get<Complaint[]>(\n      'http://localhost:8080/complaints/all/' + id\n    );\n  }\n\n  getComplaintByEngineer(id: String): Observable<Complaint[]> {\n    return this.http.get<Complaint[]>(\n      'http://localhost:8080/engineer/' + id + '/open-complaints'\n    );\n  }\n\n  getComplaintById(id: number): Observable<Complaint> {\n    return this.http.get<Complaint>('http://localhost:8080/complaints/' + id);\n  }\n\n  getAllProducts(): Observable<Product[]> {\n    return this.http.get<Product[]>(\n      'http://localhost:8080/api/products/allProducts'\n    );\n  }\n\n  // bookComplaint(\n  //   clientId: string,\n  //   productModelNumber: string,\n  //   complaint: { description: string }\n  // ): Observable<string> {\n  //   const url = `${this.bookComplaintUrl}/complaints/book`;\n  //   const params = { clientId, productModelNumber };\n  //   return this.http.post<string>(url, complaint, { params });\n  // }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}