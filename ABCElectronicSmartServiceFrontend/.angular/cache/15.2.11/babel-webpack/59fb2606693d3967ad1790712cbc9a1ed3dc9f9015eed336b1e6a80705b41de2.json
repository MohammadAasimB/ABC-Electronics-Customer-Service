{"ast":null,"code":"import { inject } from '@angular/core';\nimport { AuthService } from './service/auth.service';\nimport { Router } from '@angular/router';\nexport const authGuard = (route, state) => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  const isLoggedIn = authService.isLoggedIn();\n  const roles = authService.getUserRoles();\n  // Block ROLE_CLIENT from accessing certain routes\n  const restrictedForClient = ['/getComplaintByEngineer', '/getComplaintAndGetClient'\n  // Add more restricted paths here\n  ];\n\n  if (isLoggedIn) {\n    const currentPath = state.url;\n    if (roles.includes('ROLE_CLIENT') && restrictedForClient.some(path => currentPath.startsWith(path))) {\n      router.navigate(['/']); // Redirect to home or unauthorized page\n      return false;\n    }\n    return true;\n  } else {\n    router.navigate(['/logIn']);\n    return false;\n  }\n};","map":{"version":3,"mappings":"AAAA,SAASA,MAAM,QAAQ,eAAe;AAEtC,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,MAAM,QAAQ,iBAAiB;AAExC,OAAO,MAAMC,SAAS,GAAkB,CAACC,KAAK,EAAEC,KAAK,KAAI;EACvD,MAAMC,WAAW,GAAGN,MAAM,CAACC,WAAW,CAAC;EACvC,MAAMM,MAAM,GAAGP,MAAM,CAACE,MAAM,CAAC;EAE7B,MAAMM,UAAU,GAAGF,WAAW,CAACE,UAAU,EAAE;EAC3C,MAAMC,KAAK,GAAGH,WAAW,CAACI,YAAY,EAAE;EAExC;EACA,MAAMC,mBAAmB,GAAG,CAC1B,yBAAyB,EACzB;EACA;EAAA,CACD;;EAED,IAAIH,UAAU,EAAE;IACd,MAAMI,WAAW,GAAGP,KAAK,CAACQ,GAAG;IAC7B,IACEJ,KAAK,CAACK,QAAQ,CAAC,aAAa,CAAC,IAC7BH,mBAAmB,CAACI,IAAI,CAAEC,IAAI,IAAKJ,WAAW,CAACK,UAAU,CAACD,IAAI,CAAC,CAAC,EAChE;MACAT,MAAM,CAACW,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACxB,OAAO,KAAK;;IAEd,OAAO,IAAI;GACZ,MAAM;IACLX,MAAM,CAACW,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAC3B,OAAO,KAAK;;AAEhB,CAAC","names":["inject","AuthService","Router","authGuard","route","state","authService","router","isLoggedIn","roles","getUserRoles","restrictedForClient","currentPath","url","includes","some","path","startsWith","navigate"],"sourceRoot":"","sources":["C:\\Users\\MB20\\OneDrive - Capgemini\\Desktop\\New folder (4)\\ABC-Electronics-Customer-Service\\ABCElectronicSmartServiceFrontend\\src\\app\\auth.guard.ts"],"sourcesContent":["import { inject } from '@angular/core';\nimport { CanActivateFn } from '@angular/router';\nimport { AuthService } from './service/auth.service';\nimport { Router } from '@angular/router';\n\nexport const authGuard: CanActivateFn = (route, state) => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n\n  const isLoggedIn = authService.isLoggedIn();\n  const roles = authService.getUserRoles();\n\n  // Block ROLE_CLIENT from accessing certain routes\n  const restrictedForClient = [\n    '/getComplaintByEngineer',\n    '/getComplaintAndGetClient',\n    // Add more restricted paths here\n  ];\n\n  if (isLoggedIn) {\n    const currentPath = state.url;\n    if (\n      roles.includes('ROLE_CLIENT') &&\n      restrictedForClient.some((path) => currentPath.startsWith(path))\n    ) {\n      router.navigate(['/']); // Redirect to home or unauthorized page\n      return false;\n    }\n    return true;\n  } else {\n    router.navigate(['/logIn']);\n    return false;\n  }\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}