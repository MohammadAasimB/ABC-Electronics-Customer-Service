{"ast":null,"code":"import { jwtDecode } from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  getToken() {\n    return localStorage.getItem('jwtToken');\n  }\n  getUserRoles() {\n    const token = this.getToken();\n    if (!token) return [];\n    try {\n      const decoded = jwtDecode(token);\n      return decoded.role || [];\n    } catch (error) {\n      console.error('Invalid token:', error);\n      return [];\n    }\n  }\n  getUsername() {\n    const token = this.getToken();\n    if (!token) return null;\n    try {\n      const decoded = jwtDecode(token);\n      return decoded.sub; // or decoded.id depending on your token\n    } catch (error) {\n      console.error('Invalid token:', error);\n      return null;\n    }\n  }\n  isRole(role) {\n    return this.getUserRoles().includes(role);\n  }\n  isLoggedIn() {\n    const token = this.getToken();\n    // console.log('Token found:', token);\n    console.log(!!token);\n    return !!!token;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,SAAS,QAAyC,YAAY;;AAWvE,OAAM,MAAOC,WAAW;EACtBC,QAAQ;IACN,OAAOC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EACzC;EAEAC,YAAY;IACV,MAAMC,KAAK,GAAG,IAAI,CAACJ,QAAQ,EAAE;IAC7B,IAAI,CAACI,KAAK,EAAE,OAAO,EAAE;IAErB,IAAI;MACF,MAAMC,OAAO,GAAGP,SAAS,CAAeM,KAAK,CAAC;MAE9C,OAAOC,OAAO,CAACC,IAAI,IAAI,EAAE;KAC1B,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtC,OAAO,EAAE;;EAEb;EAEAE,WAAW;IACT,MAAML,KAAK,GAAG,IAAI,CAACJ,QAAQ,EAAE;IAC7B,IAAI,CAACI,KAAK,EAAE,OAAO,IAAI;IAEvB,IAAI;MACF,MAAMC,OAAO,GAAGP,SAAS,CAAeM,KAAK,CAAC;MAC9C,OAAOC,OAAO,CAACK,GAAG,CAAC,CAAC;KACrB,CAAC,OAAOH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtC,OAAO,IAAI;;EAEf;EAEAI,MAAM,CAACL,IAAY;IACjB,OAAO,IAAI,CAACH,YAAY,EAAE,CAACS,QAAQ,CAACN,IAAI,CAAC;EAC3C;EAEAO,UAAU;IACR,MAAMT,KAAK,GAAG,IAAI,CAACJ,QAAQ,EAAE;IAC7B;IACAQ,OAAO,CAACM,GAAG,CAAC,CAAC,CAACV,KAAK,CAAC;IACpB,OAAO,CAAC,CAAC,CAACA,KAAK;EACjB;;;uBAzCWL,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAgB,SAAXhB,WAAW;MAAAiB,YAFV;IAAM;EAAA","names":["jwtDecode","AuthService","getToken","localStorage","getItem","getUserRoles","token","decoded","role","error","console","getUsername","sub","isRole","includes","isLoggedIn","log","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\MB20\\OneDrive - Capgemini\\Desktop\\New folder (4)\\ABC-Electronics-Customer-Service\\ABCElectronicSmartServiceFrontend\\src\\app\\service\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { jwtDecode, JwtPayload as JwtLibraryPayload } from 'jwt-decode';\n\ninterface MyJwtPayload {\n  sub: string;\n  role: string[]; // or string if it's a single role\n  exp: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  getToken(): string | null {\n    return localStorage.getItem('jwtToken');\n  }\n\n  getUserRoles(): string[] {\n    const token = this.getToken();\n    if (!token) return [];\n\n    try {\n      const decoded = jwtDecode<MyJwtPayload>(token);\n\n      return decoded.role || [];\n    } catch (error) {\n      console.error('Invalid token:', error);\n      return [];\n    }\n  }\n\n  getUsername(): string | null {\n    const token = this.getToken();\n    if (!token) return null;\n\n    try {\n      const decoded = jwtDecode<MyJwtPayload>(token);\n      return decoded.sub; // or decoded.id depending on your token\n    } catch (error) {\n      console.error('Invalid token:', error);\n      return null;\n    }\n  }\n\n  isRole(role: string): boolean {\n    return this.getUserRoles().includes(role);\n  }\n\n  isLoggedIn(): boolean {\n    const token = this.getToken();\n    // console.log('Token found:', token);\n    console.log(!!token);\n    return !!!token;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}