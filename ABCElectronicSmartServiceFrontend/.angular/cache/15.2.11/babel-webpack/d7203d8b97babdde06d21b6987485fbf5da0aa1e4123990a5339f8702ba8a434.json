{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./login.service\";\nexport class ApiService {\n  // loginService: any;\n  constructor(http, loginService) {\n    this.http = http;\n    this.loginService = loginService;\n    this.baseUrl = 'http://localhost:8080/logIn';\n    this.bookComplaintUrl = 'http://localhost:8080/api/complaints';\n  }\n  registerClient(clientData) {\n    return this.http.post('http://localhost:8080/api/clients/register', clientData, {\n      responseType: 'text'\n    });\n  }\n  // logIn(name: string, password: string, role: string): Observable<string> {\n  //   const url = `${this.baseUrl}/${name}/${password}/${role}`;\n  //   return this.http.get<string>(url);\n  // }\n  getClientById(id) {\n    return this.http.get('http://localhost:8080/api/clients/' + id);\n  }\n  // logIn(name: string, password: string, role: string): Observable<string> {\n  //   const url = `${this.baseUrl}/${name}/${password}/${role}`;\n  //   return this.http.get(url, { responseType: 'text' }).pipe(\n  //     tap((response) => {\n  //       this.loginService.setSignin(true);\n  //       this.loginService.setUserId(response);\n  //     })\n  //   );\n  // }\n  // addComplaint(complaint: Complaint): Observable<any> {\n  //   return this.http.post('http://localhost:8080/complaints/add', complaint);\n  // }\n  bookComplaint(clientId, productModelNumber, complaint) {\n    const params = new HttpParams().set('clientId', clientId).set('productModelNumber', productModelNumber);\n    return this.http.post('http://localhost:8080/complaints/book', complaint, {\n      params\n    });\n  }\n  // addData(demo: DemoModel): Observable<any> {\n  //   return this.http.post('http://localhost:8081/addData', demo);\n  // }\n  getComplaintByClient(id) {\n    return this.http.get('http://localhost:8080/complaints/all/' + id);\n  }\n  getComplaintByEngineer(id) {\n    return this.http.get('http://localhost:8080/engineer/' + id + '/open-complaints');\n  }\n  getComplaintByEngineerAndSorted(id) {\n    return this.http.get('http://localhost:8080/engineer/' + id + '/complaints/sorted-by-priority');\n  }\n  complaintResolved(complaint, id) {\n    return this.http.put('http://localhost:8080/api/clients/complaint/status/' + id, complaint);\n  }\n  getComplaintById(id) {\n    return this.http.get('http://localhost:8080/complaints/' + id);\n  }\n  getAllProducts() {\n    return this.http.get('http://localhost:8080/api/products/allProducts');\n  }\n  getComplaintsByEngineerStatusAndResolvedDate(engineerId, status, resolvedDate) {\n    return this.http.get('http://localhost:8080/complaints/engineer/status/date', {\n      params: {\n        engineerId: engineerId.toString(),\n        status: status,\n        resolvedDate: resolvedDate\n      }\n    });\n  }\n  static {\n    this.ɵfac = function ApiService_Factory(t) {\n      return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LoginService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAGEA,UAAU,QACL,sBAAsB;;;;AAU7B,OAAM,MAAOC,UAAU;EAGrB;EAEAC,YAAoBC,IAAgB,EAAUC,YAA0B;IAApD,SAAI,GAAJD,IAAI;IAAsB,iBAAY,GAAZC,YAAY;IAJlD,YAAO,GAAG,6BAA6B;IACvC,qBAAgB,GAAG,sCAAsC;EAGU;EAE3EC,cAAc,CAACC,UAAe;IAC5B,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CACnB,4CAA4C,EAC5CD,UAAU,EACV;MAAEE,YAAY,EAAE;IAAgB,CAAE,CACnC;EACH;EAEA;EACA;EACA;EACA;EAEAC,aAAa,CAACC,EAAU;IACtB,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAS,oCAAoC,GAAGD,EAAE,CAAC;EACzE;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEAE,aAAa,CACXC,QAAgB,EAChBC,kBAA0B,EAC1BC,SAAc;IAEd,MAAMC,MAAM,GAAG,IAAIhB,UAAU,EAAE,CAC5BiB,GAAG,CAAC,UAAU,EAAEJ,QAAQ,CAAC,CACzBI,GAAG,CAAC,oBAAoB,EAAEH,kBAAkB,CAAC;IAEhD,OAAO,IAAI,CAACX,IAAI,CAACI,IAAI,CAAC,uCAAuC,EAAEQ,SAAS,EAAE;MACxEC;KACD,CAAC;EACJ;EAEA;EACA;EACA;EAEAE,oBAAoB,CAACR,EAAU;IAC7B,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAClB,uCAAuC,GAAGD,EAAE,CAC7C;EACH;EAEAS,sBAAsB,CAACT,EAAU;IAC/B,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAClB,iCAAiC,GAAGD,EAAE,GAAG,kBAAkB,CAC5D;EACH;EAEAU,+BAA+B,CAACV,EAAU;IACxC,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAClB,iCAAiC,GAAGD,EAAE,GAAG,gCAAgC,CAC1E;EACH;EAEAW,iBAAiB,CAACN,SAAoB,EAAEL,EAAU;IAChD,OAAO,IAAI,CAACP,IAAI,CAACmB,GAAG,CAClB,qDAAqD,GAAGZ,EAAE,EAC1DK,SAAS,CACV;EACH;EAEAQ,gBAAgB,CAACb,EAAU;IACzB,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAY,mCAAmC,GAAGD,EAAE,CAAC;EAC3E;EAEAc,cAAc;IACZ,OAAO,IAAI,CAACrB,IAAI,CAACQ,GAAG,CAClB,gDAAgD,CACjD;EACH;EAEAc,4CAA4C,CAC1CC,UAAkB,EAClBC,MAAc,EACdC,YAAoB;IAEpB,OAAO,IAAI,CAACzB,IAAI,CAACQ,GAAG,CAClB,uDAAuD,EACvD;MACEK,MAAM,EAAE;QACNU,UAAU,EAAEA,UAAU,CAACG,QAAQ,EAAE;QACjCF,MAAM,EAAEA,MAAM;QACdC,YAAY,EAAEA;;KAEjB,CACF;EACH;;;uBA1GW3B,UAAU;IAAA;EAAA;;;aAAVA,UAAU;MAAA6B,SAAV7B,UAAU;MAAA8B,YAFT;IAAM;EAAA","names":["HttpParams","ApiService","constructor","http","loginService","registerClient","clientData","post","responseType","getClientById","id","get","bookComplaint","clientId","productModelNumber","complaint","params","set","getComplaintByClient","getComplaintByEngineer","getComplaintByEngineerAndSorted","complaintResolved","put","getComplaintById","getAllProducts","getComplaintsByEngineerStatusAndResolvedDate","engineerId","status","resolvedDate","toString","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\MB20\\OneDrive - Capgemini\\Desktop\\New folder (4)\\ABC-Electronics-Customer-Service\\ABCElectronicSmartServiceFrontend\\src\\app\\service\\Api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpClient,\r\n  HttpErrorResponse,\r\n  HttpParams,\r\n} from '@angular/common/http';\r\nimport { Observable, tap } from 'rxjs';\r\nimport { LoginService } from './login.service';\r\nimport { Complaint } from '../model/complaint';\r\nimport { Product } from '../model/product';\r\nimport { Client } from '../model/client';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ApiService {\r\n  private baseUrl = 'http://localhost:8080/logIn';\r\n  private bookComplaintUrl = 'http://localhost:8080/api/complaints';\r\n  // loginService: any;\r\n\r\n  constructor(private http: HttpClient, private loginService: LoginService) {}\r\n\r\n  registerClient(clientData: any) {\r\n    return this.http.post(\r\n      'http://localhost:8080/api/clients/register',\r\n      clientData,\r\n      { responseType: 'text' as 'json' }\r\n    );\r\n  }\r\n\r\n  // logIn(name: string, password: string, role: string): Observable<string> {\r\n  //   const url = `${this.baseUrl}/${name}/${password}/${role}`;\r\n  //   return this.http.get<string>(url);\r\n  // }\r\n\r\n  getClientById(id: string): Observable<Client> {\r\n    return this.http.get<Client>('http://localhost:8080/api/clients/' + id);\r\n  }\r\n\r\n  // logIn(name: string, password: string, role: string): Observable<string> {\r\n  //   const url = `${this.baseUrl}/${name}/${password}/${role}`;\r\n  //   return this.http.get(url, { responseType: 'text' }).pipe(\r\n  //     tap((response) => {\r\n  //       this.loginService.setSignin(true);\r\n  //       this.loginService.setUserId(response);\r\n  //     })\r\n  //   );\r\n  // }\r\n\r\n  // addComplaint(complaint: Complaint): Observable<any> {\r\n  //   return this.http.post('http://localhost:8080/complaints/add', complaint);\r\n  // }\r\n\r\n  bookComplaint(\r\n    clientId: string,\r\n    productModelNumber: string,\r\n    complaint: any\r\n  ): Observable<any> {\r\n    const params = new HttpParams()\r\n      .set('clientId', clientId)\r\n      .set('productModelNumber', productModelNumber);\r\n\r\n    return this.http.post('http://localhost:8080/complaints/book', complaint, {\r\n      params,\r\n    });\r\n  }\r\n\r\n  // addData(demo: DemoModel): Observable<any> {\r\n  //   return this.http.post('http://localhost:8081/addData', demo);\r\n  // }\r\n\r\n  getComplaintByClient(id: String): Observable<Complaint[]> {\r\n    return this.http.get<Complaint[]>(\r\n      'http://localhost:8080/complaints/all/' + id\r\n    );\r\n  }\r\n\r\n  getComplaintByEngineer(id: number): Observable<Complaint[]> {\r\n    return this.http.get<Complaint[]>(\r\n      'http://localhost:8080/engineer/' + id + '/open-complaints'\r\n    );\r\n  }\r\n\r\n  getComplaintByEngineerAndSorted(id: number): Observable<Complaint[]> {\r\n    return this.http.get<Complaint[]>(\r\n      'http://localhost:8080/engineer/' + id + '/complaints/sorted-by-priority'\r\n    );\r\n  }\r\n\r\n  complaintResolved(complaint: Complaint, id: number): Observable<any> {\r\n    return this.http.put(\r\n      'http://localhost:8080/api/clients/complaint/status/' + id,\r\n      complaint\r\n    );\r\n  }\r\n\r\n  getComplaintById(id: number): Observable<Complaint> {\r\n    return this.http.get<Complaint>('http://localhost:8080/complaints/' + id);\r\n  }\r\n\r\n  getAllProducts(): Observable<Product[]> {\r\n    return this.http.get<Product[]>(\r\n      'http://localhost:8080/api/products/allProducts'\r\n    );\r\n  }\r\n\r\n  getComplaintsByEngineerStatusAndResolvedDate(\r\n    engineerId: number,\r\n    status: string,\r\n    resolvedDate: string\r\n  ): Observable<Complaint[]> {\r\n    return this.http.get<Complaint[]>(\r\n      'http://localhost:8080/complaints/engineer/status/date',\r\n      {\r\n        params: {\r\n          engineerId: engineerId.toString(),\r\n          status: status,\r\n          resolvedDate: resolvedDate,\r\n        },\r\n      }\r\n    );\r\n  }\r\n\r\n  // bookComplaint(\r\n  //   clientId: string,\r\n  //   productModelNumber: string,\r\n  //   complaint: { description: string }\r\n  // ): Observable<string> {\r\n  //   const url = `${this.bookComplaintUrl}/complaints/book`;\r\n  //   const params = { clientId, productModelNumber };\r\n  //   return this.http.post<string>(url, complaint, { params });\r\n  // }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}