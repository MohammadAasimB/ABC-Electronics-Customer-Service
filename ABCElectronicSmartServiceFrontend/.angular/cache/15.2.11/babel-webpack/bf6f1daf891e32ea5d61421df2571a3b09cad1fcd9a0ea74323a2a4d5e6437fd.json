{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class LoginService {\n  constructor() {\n    this._isSignedIn = new BehaviorSubject(false);\n    this.isSignedIn$ = this._isSignedIn.asObservable();\n    this.userId = new BehaviorSubject('');\n    this.userId$ = this.userId.asObservable();\n  }\n  setSignin(status) {\n    this._isSignedIn.next(status);\n  }\n  getSignin() {\n    return this._isSignedIn.value;\n  }\n  setUserId(id) {\n    this.userId.next(id);\n  }\n  getUserId() {\n    return this.userId.value;\n  }\n  static {\n    this.ɵfac = function LoginService_Factory(t) {\n      return new (t || LoginService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LoginService,\n      factory: LoginService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAKtC,OAAM,MAAOC,YAAY;EAMvBC;IALQ,gBAAW,GAAG,IAAIF,eAAe,CAAU,KAAK,CAAC;IACzD,gBAAW,GAAG,IAAI,CAACG,WAAW,CAACC,YAAY,EAAE;IAErC,WAAM,GAAG,IAAIJ,eAAe,CAAS,EAAE,CAAC;IAChD,YAAO,GAAG,IAAI,CAACK,MAAM,CAACD,YAAY,EAAE;EACrB;EAEfE,SAAS,CAACC,MAAe;IACvB,IAAI,CAACJ,WAAW,CAACK,IAAI,CAACD,MAAM,CAAC;EAC/B;EACAE,SAAS;IACP,OAAO,IAAI,CAACN,WAAW,CAACO,KAAK;EAC/B;EAEAC,SAAS,CAACC,EAAU;IAClB,IAAI,CAACP,MAAM,CAACG,IAAI,CAACI,EAAE,CAAC;EACtB;EACAC,SAAS;IACP,OAAO,IAAI,CAACR,MAAM,CAACK,KAAK;EAC1B;;;uBApBWT,YAAY;IAAA;EAAA;;;aAAZA,YAAY;MAAAa,SAAZb,YAAY;MAAAc,YAFX;IAAM;EAAA","names":["BehaviorSubject","LoginService","constructor","_isSignedIn","asObservable","userId","setSignin","status","next","getSignin","value","setUserId","id","getUserId","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\MB20\\OneDrive - Capgemini\\Desktop\\New folder\\ABCElectronicSmartServiceFrontend\\src\\app\\service\\login.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoginService {\n  private _isSignedIn = new BehaviorSubject<boolean>(false);\n  isSignedIn$ = this._isSignedIn.asObservable();\n\n  private userId = new BehaviorSubject<String>('');\n  userId$ = this.userId.asObservable();\n  constructor() {}\n\n  setSignin(status: boolean) {\n    this._isSignedIn.next(status);\n  }\n  getSignin(): boolean {\n    return this._isSignedIn.value;\n  }\n\n  setUserId(id: String) {\n    this.userId.next(id);\n  }\n  getUserId(): String {\n    return this.userId.value;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}