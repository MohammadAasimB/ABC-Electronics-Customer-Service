{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { jwtDecode } from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.loggedIn = new BehaviorSubject(this.hasToken());\n    this.roles = new BehaviorSubject(this.getRolesFromToken());\n    this.isLoggedIn$ = this.loggedIn.asObservable();\n    this.roles$ = this.roles.asObservable();\n    this.token = localStorage.getItem('jwtToken');\n  }\n  if(token) {\n    const decoded = jwtDecode(token);\n    console.log('Decoded Token:', decoded);\n  }\n  hasToken() {\n    return !!localStorage.getItem('jwtToken');\n  }\n  getRolesFromToken() {\n    const token = localStorage.getItem('jwtToken');\n    if (!token) return [];\n    try {\n      const decoded = jwtDecode(token);\n      return decoded.role || [];\n    } catch {\n      return [];\n    }\n  }\n  getToken() {\n    return localStorage.getItem('jwtToken');\n  }\n  getUserRoles() {\n    console.log('rol' + this.roles.value);\n    return this.roles.value;\n  }\n  getUsername() {\n    const token = this.getToken();\n    if (!token) return null;\n    try {\n      const decoded = jwtDecode(token);\n      return decoded.sub;\n    } catch {\n      return null;\n    }\n  }\n  isRole(role) {\n    return this.getUserRoles().includes(role);\n  }\n  isLoggedIn() {\n    return this.loggedIn.value;\n  }\n  login(token) {\n    localStorage.setItem('jwtToken', token);\n    this.loggedIn.next(true);\n    this.roles.next(this.getRolesFromToken());\n  }\n  logout() {\n    localStorage.removeItem('jwtToken');\n    this.loggedIn.next(false);\n    this.roles.next([]);\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;AACtC,SAASC,SAAS,QAAQ,YAAY;;AAWtC,OAAM,MAAOC,WAAW;EAHxBC;IAIU,aAAQ,GAAG,IAAIH,eAAe,CAAU,IAAI,CAACI,QAAQ,EAAE,CAAC;IACxD,UAAK,GAAG,IAAIJ,eAAe,CAAW,IAAI,CAACK,iBAAiB,EAAE,CAAC;IAEvE,gBAAW,GAAG,IAAI,CAACC,QAAQ,CAACC,YAAY,EAAE;IAC1C,WAAM,GAAG,IAAI,CAACC,KAAK,CAACD,YAAY,EAAE;IAE5B,UAAK,GAAGE,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;;EAEhDC,EAAE,CAAEC,KAAK;IACP,MAAMC,OAAO,GAAGZ,SAAS,CAAeW,KAAK,CAAC;IAC9CE,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,OAAO,CAAC;EACxC;EAGUT,QAAQ;IACd,OAAO,CAAC,CAACK,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EAC3C;EAEQL,iBAAiB;IACvB,MAAMO,KAAK,GAAGH,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAC9C,IAAI,CAACE,KAAK,EAAE,OAAO,EAAE;IACrB,IAAI;MACF,MAAMC,OAAO,GAAGZ,SAAS,CAAeW,KAAK,CAAC;MAC9C,OAAOC,OAAO,CAACG,IAAI,IAAI,EAAE;KAC1B,CAAC,MAAM;MACN,OAAO,EAAE;;EAEb;EAEAC,QAAQ;IACN,OAAOR,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EACzC;EAEAQ,YAAY;IACVJ,OAAO,CAACC,GAAG,CAAC,KAAK,GAAG,IAAI,CAACP,KAAK,CAACW,KAAK,CAAC;IACrC,OAAO,IAAI,CAACX,KAAK,CAACW,KAAK;EACzB;EAEAC,WAAW;IACT,MAAMR,KAAK,GAAG,IAAI,CAACK,QAAQ,EAAE;IAC7B,IAAI,CAACL,KAAK,EAAE,OAAO,IAAI;IACvB,IAAI;MACF,MAAMC,OAAO,GAAGZ,SAAS,CAAeW,KAAK,CAAC;MAC9C,OAAOC,OAAO,CAACQ,GAAG;KACnB,CAAC,MAAM;MACN,OAAO,IAAI;;EAEf;EAEAC,MAAM,CAACN,IAAY;IACjB,OAAO,IAAI,CAACE,YAAY,EAAE,CAACK,QAAQ,CAACP,IAAI,CAAC;EAC3C;EAEAQ,UAAU;IACR,OAAO,IAAI,CAAClB,QAAQ,CAACa,KAAK;EAC5B;EAEAM,KAAK,CAACb,KAAa;IACjBH,YAAY,CAACiB,OAAO,CAAC,UAAU,EAAEd,KAAK,CAAC;IACvC,IAAI,CAACN,QAAQ,CAACqB,IAAI,CAAC,IAAI,CAAC;IACxB,IAAI,CAACnB,KAAK,CAACmB,IAAI,CAAC,IAAI,CAACtB,iBAAiB,EAAE,CAAC;EAC3C;EAEAuB,MAAM;IACJnB,YAAY,CAACoB,UAAU,CAAC,UAAU,CAAC;IACnC,IAAI,CAACvB,QAAQ,CAACqB,IAAI,CAAC,KAAK,CAAC;IACzB,IAAI,CAACnB,KAAK,CAACmB,IAAI,CAAC,EAAE,CAAC;EACrB;;;uBApEWzB,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAA4B,SAAX5B,WAAW;MAAA6B,YAFV;IAAM;EAAA","names":["BehaviorSubject","jwtDecode","AuthService","constructor","hasToken","getRolesFromToken","loggedIn","asObservable","roles","localStorage","getItem","if","token","decoded","console","log","role","getToken","getUserRoles","value","getUsername","sub","isRole","includes","isLoggedIn","login","setItem","next","logout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\MB20\\OneDrive - Capgemini\\Desktop\\New folder (4)\\ABC-Electronics-Customer-Service\\ABCElectronicSmartServiceFrontend\\src\\app\\service\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { jwtDecode } from 'jwt-decode';\n\ninterface MyJwtPayload {\n  sub: string;\n  role: string[];\n  exp: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private loggedIn = new BehaviorSubject<boolean>(this.hasToken());\n  private roles = new BehaviorSubject<string[]>(this.getRolesFromToken());\n\n  isLoggedIn$ = this.loggedIn.asObservable();\n  roles$ = this.roles.asObservable();\n\n  const token = localStorage.getItem('jwtToken');\nconsole.log('Token:', token);\nif (token) {\n  const decoded = jwtDecode<MyJwtPayload>(token);\n  console.log('Decoded Token:', decoded);\n}\n\n\n  private hasToken(): boolean {\n    return !!localStorage.getItem('jwtToken');\n  }\n\n  private getRolesFromToken(): string[] {\n    const token = localStorage.getItem('jwtToken');\n    if (!token) return [];\n    try {\n      const decoded = jwtDecode<MyJwtPayload>(token);\n      return decoded.role || [];\n    } catch {\n      return [];\n    }\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('jwtToken');\n  }\n\n  getUserRoles(): string[] {\n    console.log('rol' + this.roles.value);\n    return this.roles.value;\n  }\n\n  getUsername(): string | null {\n    const token = this.getToken();\n    if (!token) return null;\n    try {\n      const decoded = jwtDecode<MyJwtPayload>(token);\n      return decoded.sub;\n    } catch {\n      return null;\n    }\n  }\n\n  isRole(role: string): boolean {\n    return this.getUserRoles().includes(role);\n  }\n\n  isLoggedIn(): boolean {\n    return this.loggedIn.value;\n  }\n\n  login(token: string): void {\n    localStorage.setItem('jwtToken', token);\n    this.loggedIn.next(true);\n    this.roles.next(this.getRolesFromToken());\n  }\n\n  logout(): void {\n    localStorage.removeItem('jwtToken');\n    this.loggedIn.next(false);\n    this.roles.next([]);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}